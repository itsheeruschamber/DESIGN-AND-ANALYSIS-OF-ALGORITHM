#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100

struct Node {
    int vertex;
    int weight;
    struct Node* next;
};

struct Graph {
    int numVertices;
    struct Node** adjLists;
};

struct Node* createNode(int v, int w) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = v;
    newNode->weight = w;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;

    graph->adjLists = (struct Node**)malloc(vertices * sizeof(struct Node*));

    int i;
    for (i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }

    return graph;
}

void addEdge(struct Graph* graph, int src, int dest, int weight) {
    struct Node* newNode = createNode(dest, weight);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

void dijkstra(struct Graph* graph, int startVertex) {
    int numVertices = graph->numVertices;
    int* shortestDistances = (int*)malloc(numVertices * sizeof(int));
    int* visited = (int*)malloc(numVertices * sizeof(int));
    int i;

    // Initialize the arrays
    for (i = 0; i < numVertices; i++) {
        shortestDistances[i] = INT_MAX;
        visited[i] = 0;
    }

    // Distance of start vertex from itself is 0
    shortestDistances[startVertex] = 0;

    int count;
    for (count = 0; count < numVertices - 1; count++) {
        int minDistance = INT_MAX;
        int minVertex = -1;

        // Find the vertex with the minimum distance from the set of unvisited vertices
        for (i = 0; i < numVertices; i++) {
            if (!visited[i] && shortestDistances[i] < minDistance) {
                minDistance = shortestDistances[i];
                minVertex = i;
            }
        }

        // Mark the selected vertex as visited
        visited[minVertex] = 1;

        // Update the distances of the adjacent vertices
        struct Node* temp = graph->adjLists[minVertex];
        while (temp != NULL) {
            int adjVertex = temp->vertex;
            int weight = temp->weight;

            if (!visited[adjVertex] && shortestDistances[minVertex] != INT_MAX &&
                shortestDistances[minVertex] + weight < shortestDistances[adjVertex]) {
                shortestDistances[adjVertex] = shortestDistances[minVertex] + weight;
            }

            temp = temp->next;
        }
    }

    // Print the shortest distances
    printf("Vertex\tShortest Distance from Start Vertex\n");
    for (i = 0; i < numVertices; i++) {
        printf("%d\t%d\n", i, shortestDistances[i]);
    }

    // Free allocated memory
    free(shortestDistances);
    free(visited);
}

int main() {
    int numVertices = 6;
    struct Graph* graph = createGraph(numVertices);

    addEdge(graph, 0, 1, 4);
    addEdge(graph, 0, 2, 3);
    addEdge(graph, 1, 3, 2);
    addEdge(graph, 1, 2, 1);
    addEdge(graph, 2, 3, 4);
    addEdge(graph, 2, 4, 3);
    addEdge(graph, 3, 4, 2);
    addEdge(graph, 3, 5, 1);
    addEdge(graph, 4, 5, 6);

    int startVertex = 0;
    dijkstra(graph, startVertex);

    return 0;
}
